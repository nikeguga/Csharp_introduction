// Задайте значение N. Напишите программу, которая выведет все натуральные числа в промежутке от 1 до N.
/*
void ShowNums(int num)
{
    if(num  > 1) ShowNums(num -1);
        Console.Write(num + " ");
}

ShowNums(10);
*/

//Напишите программу, которая будет принимать на вход число и возвращать сумму его цифр.
/*
int SumOfDigits(int num)
{
    if(num!=0) return SumOfDigits(num /10) + num % 10;
    return 0;
}

f(1234) -> f(123) + 4
f(123) -> f(12) + 3
f(12) -> f(1) + 2
f(1) -> f(0) + 1
f(0) -> 0
f(1) -> 0 + 1 = 1
f(12) -> 1 + 2 = 3
f(123) -> 3 + 3 = 6
f(1234) -> 6 + 4 = 10

Console.Write(SumOfDigits(1654313));
*/

//Задайте значения M и N. Напишите программу, которая выведет все натуральные числа в промежутке от M до N.

/*
void ShowNums(int num1, int num2)
{
    if (num1 > num2)
    {
        ShowNums(num1, num2 + 1);
        Console.Write(num2 + " ");
    }
    else if (num1 < num2)
    {
        ShowNums(num1, num2 - 1);
        Console.Write(num2 + " ");
    }
    else Console.Write(num2 + " ");
}

ShowNums(6, 1);
*/

//Напишите программу, которая на вход принимает два числа A и B, и возводит число А в целую степень B.
/*
double PowerHouse(double a, int b)
{
    if (b > 0)
    {
        return PowerHouse(a, b - 1) * a;
    }
    else if (b < 0)
    {
        return PowerHouse(a, b + 1) / a;
    }
    else return 1;
}

double a = Math.Round(PowerHouse(7, -2), 2);
Console.Write(a);
*/

// сортировка выбором и быстрая сортировка

//дз

/*

Задача 64: Задайте значение N. Напишите программу, которая выведет все натуральные числа в промежутке от N до 1. Выполнить с помощью рекурсии.
N = 5 -> "5, 4, 3, 2, 1"
N = 8 -> "8, 7, 6, 5, 4, 3, 2, 1"

как первая задача

Задача 66: Задайте значения M и N. Напишите программу, которая найдёт сумму натуральных элементов в промежутке от M до N.
M = 1; N = 15 -> 120
M = 4; N = 8. -> 30

Задача 68: Напишите программу вычисления функции Аккермана с помощью рекурсии. Даны два неотрицательных числа m и n.
m = 2, n = 3 -> A(m,n) = 9
m = 3, n = 2 -> A(m,n) = 29

это готовая программа, фактически
*/